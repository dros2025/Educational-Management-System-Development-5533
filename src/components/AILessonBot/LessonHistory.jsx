import React, { useState, useEffect } from 'react'
import { Link } from 'react-router-dom'
import { useAuth } from '../../contexts/AuthContext'
import { getLessons, deleteLesson } from '../../lib/supabase'
import { generateLessonPDF, downloadBlob, checkPDFServiceHealth } from '../../lib/pdfService'
import toast from 'react-hot-toast'
import SafeIcon from '../../common/SafeIcon'
import * as FiIcons from 'react-icons/fi'

const { FiClock, FiDownload, FiTrash2, FiEye, FiSearch, FiFilter, FiUsers, FiBook, FiLayers, FiArrowLeft, FiCpu, FiFileText, FiDatabase, FiArchive, FiBookmark, FiCalendar, FiTag } = FiIcons

const LessonHistory = () => {
  const { user } = useAuth()
  const [lessons, setLessons] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterAgeGroup, setFilterAgeGroup] = useState('all')
  const [filterType, setFilterType] = useState('all')
  const [selectedLesson, setSelectedLesson] = useState(null)
  const [pdfServiceAvailable, setPdfServiceAvailable] = useState(false)

  useEffect(() => {
    fetchAILessons()
    checkPDFService()
  }, [])

  const checkPDFService = async () => {
    const isAvailable = await checkPDFServiceHealth()
    setPdfServiceAvailable(isAvailable)
  }

  const fetchAILessons = async () => {
    try {
      // Get all lessons from the database
      const { data: allLessons, error } = await getLessons()
      if (error) throw error

      // Filter to show only AI-generated lessons created by this user
      const aiLessons = (allLessons || []).filter(lesson => {
        // Check if lesson was created by AI and by this user
        const isAILesson = lesson.ai_metadata?.source === 'ai'
        const isUserLesson = lesson.created_by === user.profile.id
        return isAILesson && isUserLesson
      })

      // Sort by creation date (newest first)
      const sortedLessons = aiLessons.sort((a, b) => 
        new Date(b.created_at) - new Date(a.created_at)
      )

      setLessons(sortedLessons)
    } catch (error) {
      console.error('Error fetching AI lessons:', error)
      toast.error('Failed to load AI lesson history')
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async (lessonId) => {
    if (!confirm('Are you sure you want to delete this AI-generated lesson?')) return

    try {
      const { error } = await deleteLesson(lessonId)
      if (error) throw error
      
      toast.success('AI lesson deleted successfully')
      fetchAILessons()
    } catch (error) {
      toast.error('Failed to delete AI lesson')
    }
  }

  const handleDownload = async (lesson, format = 'pdf') => {
    try {
      if (format === 'pdf' && pdfServiceAvailable) {
        const pdfData = {
          title: lesson.title,
          content: lesson.content,
          studentName: '',
          ageGroup: lesson.age_group,
          topic: lesson.topic || '',
          biblePassage: lesson.bible_passage || '',
          theme: lesson.theme || '',
          filename: `${lesson.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`
        }

        const blob = await generateLessonPDF(pdfData)
        downloadBlob(blob, pdfData.filename)
        toast.success('PDF downloaded successfully!')
      } else {
        const content = `
${lesson.title}
${'='.repeat(lesson.title.length)}

Age Group: ${lesson.age_group}
${lesson.topic ? `Topic: ${lesson.topic}` : ''}
${lesson.bible_passage ? `Bible Passage: ${lesson.bible_passage}` : ''}
${lesson.theme ? `Theme: ${lesson.theme}` : ''}
${lesson.duration ? `Duration: ${lesson.duration} minutes` : ''}
${lesson.lesson_type ? `Type: ${lesson.lesson_type}` : ''}
${lesson.ai_metadata?.memory_verse ? `Memory Verse: ${lesson.ai_metadata.memory_verse}` : ''}
${lesson.ai_metadata?.core_message ? `Core Message: ${lesson.ai_metadata.core_message}` : ''}

${lesson.content}

---
Generated by AI Lesson Bot
Model: ${lesson.ai_metadata?.model_used || 'AI'}
${lesson.ai_metadata?.unified_generation ? 'Part of Unified Generation' : 'Single Generation'}
Created: ${new Date(lesson.created_at).toLocaleDateString()}
        `.trim()

        const blob = new Blob([content], { type: 'text/plain' })
        const filename = `${lesson.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`
        downloadBlob(blob, filename)
        toast.success('Text file downloaded successfully!')
      }
    } catch (error) {
      toast.error('Failed to download lesson: ' + error.message)
    }
  }

  const filteredLessons = lessons.filter(lesson => {
    const matchesSearch = lesson.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lesson.topic?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lesson.theme?.toLowerCase().includes(searchTerm.toLowerCase())

    const matchesAgeGroup = filterAgeGroup === 'all' || lesson.age_group === filterAgeGroup

    const matchesType = filterType === 'all' ||
      (filterType === 'single' && lesson.lesson_type === 'single') ||
      (filterType === 'series' && lesson.lesson_type === 'series') ||
      (filterType === 'unified' && lesson.ai_metadata?.unified_generation)

    return matchesSearch && matchesAgeGroup && matchesType
  })

  // Group lessons by unified generation
  const groupedLessons = {}
  const standaloneLessons = []

  filteredLessons.forEach(lesson => {
    if (lesson.ai_metadata?.unified_generation && lesson.ai_metadata?.master_lesson_id) {
      const masterId = lesson.ai_metadata.master_lesson_id
      if (!groupedLessons[masterId]) {
        groupedLessons[masterId] = {
          masterInfo: {
            topic: lesson.topic,
            bible_passage: lesson.bible_passage,
            theme: lesson.theme,
            memory_verse: lesson.ai_metadata.memory_verse,
            core_message: lesson.ai_metadata.core_message,
            created_at: lesson.created_at
          },
          lessons: []
        }
      }
      groupedLessons[masterId].lessons.push(lesson)
    } else {
      standaloneLessons.push(lesson)
    }
  })

  const ageGroups = [
    { value: 'all', label: 'All Ages' },
    { value: '3-5', label: '3-5 years' },
    { value: '5-10', label: '5-10 years' },
    { value: '11-14', label: '11-14 years' },
    { value: '15-18', label: '15-18 years' },
    { value: '18+', label: '18+ years' }
  ]

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Back Button */}
      <div className="flex items-center space-x-4">
        <Link
          to="/ai-lesson-bot"
          className="flex items-center text-sm text-gray-600 hover:text-gray-900 transition-colors"
        >
          <SafeIcon icon={FiArrowLeft} className="h-4 w-4 mr-1" />
          Back to AI Lesson Bot
        </Link>
      </div>

      {/* Header */}
      <div className="flex items-center space-x-3">
        <SafeIcon icon={FiClock} className="h-8 w-8 text-orange-600" />
        <div>
          <h1 className="text-3xl font-bold text-gray-900">AI Lesson History</h1>
          <p className="text-gray-600">View and manage your AI-generated lessons</p>
        </div>
      </div>

      {/* Info Banner */}
      <div className="bg-gradient-to-r from-orange-50 to-purple-50 border border-orange-200 rounded-lg p-4">
        <div className="flex items-center space-x-2 mb-2">
          <SafeIcon icon={FiDatabase} className="h-5 w-5 text-orange-600" />
          <h3 className="text-sm font-medium text-orange-900">AI Lesson History</h3>
        </div>
        <p className="text-sm text-orange-800">
          This page shows all AI-generated lessons you've created. All lessons are also available in the main Lessons tab alongside manually created content.
        </p>
      </div>

      {/* Filters */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Search
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <SafeIcon icon={FiSearch} className="h-4 w-4 text-gray-400" />
              </div>
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                placeholder="Search lessons..."
              />
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Age Group
            </label>
            <select
              value={filterAgeGroup}
              onChange={(e) => setFilterAgeGroup(e.target.value)}
              className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
            >
              {ageGroups.map(group => (
                <option key={group.value} value={group.value}>
                  {group.label}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Generation Type
            </label>
            <select
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
              className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
            >
              <option value="all">All Types</option>
              <option value="single">Single Lesson</option>
              <option value="unified">Unified Generation</option>
              <option value="series">Series</option>
            </select>
          </div>
          <div className="flex items-end">
            <div className="text-sm text-gray-600">
              <div>Total: {lessons.length} AI lessons</div>
              <div>Filtered: {filteredLessons.length} shown</div>
            </div>
          </div>
        </div>
      </div>

      {/* Content Display */}
      {filteredLessons.length === 0 ? (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
          <SafeIcon icon={FiCpu} className="h-12 w-12 mx-auto mb-4 text-gray-400" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">No AI lessons found</h3>
          <p className="text-gray-600 mb-4">
            {lessons.length === 0
              ? "You haven't generated any AI lessons yet. Start by creating your first lesson!"
              : "No lessons match your current filters. Try adjusting your search criteria."
            }
          </p>
          <Link
            to="/ai-lesson-bot/lesson-maker"
            className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors inline-flex items-center space-x-2"
          >
            <SafeIcon icon={FiCpu} className="h-4 w-4" />
            <span>Generate Your First Lesson</span>
          </Link>
        </div>
      ) : (
        <div className="space-y-8">
          {/* Unified Generation Groups */}
          {Object.entries(groupedLessons).map(([masterId, group]) => (
            <div key={masterId} className="bg-white rounded-lg shadow-sm border border-gray-200">
              {/* Group Header */}
              <div className="bg-gradient-to-r from-purple-50 to-blue-50 border-b border-gray-200 p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="flex items-center space-x-2 mb-2">
                      <SafeIcon icon={FiBookmark} className="h-5 w-5 text-purple-600" />
                      <h3 className="text-lg font-semibold text-gray-900">
                        🎯 Unified Generation: {group.masterInfo.topic}
                      </h3>
                      <span className="text-xs px-2 py-1 rounded-full bg-purple-100 text-purple-700">
                        {group.lessons.length} Age Groups
                      </span>
                    </div>
                    <div className="text-sm text-gray-600 space-y-1">
                      <p><strong>Bible Passage:</strong> {group.masterInfo.bible_passage}</p>
                      <p><strong>Memory Verse:</strong> <span className="italic text-blue-600">"{group.masterInfo.memory_verse}"</span></p>
                      <p><strong>Core Message:</strong> {group.masterInfo.core_message}</p>
                      <p><strong>Generated:</strong> {new Date(group.masterInfo.created_at).toLocaleDateString()}</p>
                    </div>
                  </div>
                  <button
                    onClick={() => {
                      // Download all lessons in this group
                      group.lessons.forEach((lesson, index) => {
                        setTimeout(() => handleDownload(lesson, 'text'), index * 500)
                      })
                      toast.success('Downloading all lessons in group...')
                    }}
                    className="bg-green-600 text-white px-3 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-2"
                  >
                    <SafeIcon icon={FiDownload} className="h-4 w-4" />
                    <span>Download All</span>
                  </button>
                </div>
              </div>

              {/* Group Lessons */}
              <div className="divide-y divide-gray-200">
                {group.lessons.map((lesson) => (
                  <div key={lesson.id} className="p-6 hover:bg-gray-50">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-2">
                          <h4 className="text-base font-semibold text-gray-900">{lesson.title}</h4>
                          <span className="text-xs px-2 py-1 rounded-full bg-blue-100 text-blue-700">
                            {lesson.age_group}
                          </span>
                        </div>
                        <div className="text-sm text-gray-600">
                          <p><strong>Duration:</strong> {lesson.duration} minutes</p>
                          {lesson.theme && <p><strong>Theme:</strong> {lesson.theme}</p>}
                        </div>
                      </div>
                      <div className="flex items-center space-x-2 ml-4">
                        <button
                          onClick={() => setSelectedLesson(lesson)}
                          className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 transition-colors flex items-center space-x-1"
                        >
                          <SafeIcon icon={FiEye} className="h-4 w-4" />
                          <span>View</span>
                        </button>
                        {pdfServiceAvailable && (
                          <button
                            onClick={() => handleDownload(lesson, 'pdf')}
                            className="bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700 transition-colors"
                          >
                            <SafeIcon icon={FiDownload} className="h-4 w-4" />
                          </button>
                        )}
                        <button
                          onClick={() => handleDownload(lesson, 'text')}
                          className="bg-gray-600 text-white px-3 py-1 rounded hover:bg-gray-700 transition-colors"
                        >
                          <SafeIcon icon={FiFileText} className="h-4 w-4" />
                        </button>
                        <button
                          onClick={() => handleDelete(lesson.id)}
                          className="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700 transition-colors"
                        >
                          <SafeIcon icon={FiTrash2} className="h-4 w-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}

          {/* Standalone Lessons */}
          {standaloneLessons.length > 0 && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center space-x-2">
                <SafeIcon icon={FiFileText} className="h-5 w-5" />
                <span>Individual Lessons</span>
              </h3>
              <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                {standaloneLessons.map((lesson) => (
                  <div key={lesson.id} className="bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow">
                    <div className="p-6">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-center space-x-2">
                          <SafeIcon icon={FiCpu} className="h-5 w-5 text-purple-600" />
                          <span className="text-xs px-2 py-1 rounded-full bg-purple-100 text-purple-700">
                            AI Generated
                          </span>
                          {lesson.lesson_type === 'series' && (
                            <span className="text-xs px-2 py-1 rounded-full bg-indigo-100 text-indigo-700">
                              <SafeIcon icon={FiLayers} className="h-3 w-3 inline mr-1" />
                              Series
                            </span>
                          )}
                        </div>
                        <span className="text-xs px-2 py-1 rounded-full bg-blue-100 text-blue-700">
                          {lesson.age_group}
                        </span>
                      </div>

                      <h3 className="text-base font-semibold text-gray-900 mb-2 line-clamp-2">
                        {lesson.title}
                      </h3>

                      {lesson.topic && (
                        <p className="text-sm text-gray-600 mb-1">
                          <strong>Topic:</strong> {lesson.topic}
                        </p>
                      )}

                      {lesson.bible_passage && (
                        <p className="text-sm text-blue-600 mb-2 font-medium line-clamp-1">
                          {lesson.bible_passage}
                        </p>
                      )}

                      <div className="flex items-center justify-between text-xs text-gray-500 mb-4">
                        <span className="flex items-center space-x-1">
                          <SafeIcon icon={FiCalendar} className="h-3 w-3" />
                          <span>{new Date(lesson.created_at).toLocaleDateString()}</span>
                        </span>
                        <div className="flex items-center space-x-2">
                          {lesson.duration && <span>{lesson.duration}min</span>}
                          <span className="text-purple-600">{lesson.ai_metadata?.model_used || 'AI'}</span>
                        </div>
                      </div>

                      <div className="flex items-center space-x-1">
                        <button
                          onClick={() => setSelectedLesson(lesson)}
                          className="flex-1 bg-blue-600 text-white py-2 px-2 rounded-md hover:bg-blue-700 transition-colors flex items-center justify-center space-x-1 text-sm"
                        >
                          <SafeIcon icon={FiEye} className="h-3 w-3" />
                          <span>View</span>
                        </button>
                        {pdfServiceAvailable && (
                          <button
                            onClick={() => handleDownload(lesson, 'pdf')}
                            className="bg-green-600 text-white py-2 px-2 rounded-md hover:bg-green-700 transition-colors"
                            title="Download PDF"
                          >
                            <SafeIcon icon={FiDownload} className="h-3 w-3" />
                          </button>
                        )}
                        <button
                          onClick={() => handleDownload(lesson, 'text')}
                          className="bg-gray-600 text-white py-2 px-2 rounded-md hover:bg-gray-700 transition-colors"
                          title="Download Text"
                        >
                          <SafeIcon icon={FiFileText} className="h-3 w-3" />
                        </button>
                        <button
                          onClick={() => handleDelete(lesson.id)}
                          className="bg-red-600 text-white py-2 px-2 rounded-md hover:bg-red-700 transition-colors"
                          title="Delete"
                        >
                          <SafeIcon icon={FiTrash2} className="h-3 w-3" />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Lesson Detail Modal */}
      {selectedLesson && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <div className="flex justify-between items-start">
                <div>
                  <div className="flex items-center space-x-2 mb-2">
                    <h2 className="text-2xl font-bold text-gray-900">
                      {selectedLesson.title}
                    </h2>
                    <span className="text-xs px-2 py-1 rounded-full bg-purple-100 text-purple-700">
                      AI Generated
                    </span>
                    {selectedLesson.ai_metadata?.unified_generation && (
                      <span className="text-xs px-2 py-1 rounded-full bg-blue-100 text-blue-700">
                        🎯 Unified Content
                      </span>
                    )}
                  </div>
                  <div className="flex items-center space-x-4 text-sm text-gray-600">
                    <span className="flex items-center space-x-1">
                      <SafeIcon icon={FiUsers} className="h-4 w-4" />
                      <span>Age: {selectedLesson.age_group}</span>
                    </span>
                    <span className="flex items-center space-x-1">
                      <SafeIcon icon={FiCpu} className="h-4 w-4" />
                      <span>{selectedLesson.ai_metadata?.model_used || 'AI'}</span>
                    </span>
                    <span>{new Date(selectedLesson.created_at).toLocaleDateString()}</span>
                  </div>
                  {selectedLesson.topic && (
                    <p className="text-sm text-gray-700 mt-2">
                      <strong>Topic:</strong> {selectedLesson.topic}
                    </p>
                  )}
                  {selectedLesson.bible_passage && (
                    <p className="text-sm text-blue-600 mt-1 font-medium">
                      <strong>Bible Passage:</strong> {selectedLesson.bible_passage}
                    </p>
                  )}
                  {selectedLesson.ai_metadata?.memory_verse && (
                    <p className="text-sm text-purple-600 mt-1 font-medium italic">
                      <strong>Memory Verse:</strong> "{selectedLesson.ai_metadata.memory_verse}"
                    </p>
                  )}
                </div>
                <div className="flex space-x-2">
                  {pdfServiceAvailable && (
                    <button
                      onClick={() => handleDownload(selectedLesson, 'pdf')}
                      className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-2"
                    >
                      <SafeIcon icon={FiDownload} className="h-4 w-4" />
                      <span>PDF</span>
                    </button>
                  )}
                  <button
                    onClick={() => handleDownload(selectedLesson, 'text')}
                    className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors flex items-center space-x-2"
                  >
                    <SafeIcon icon={FiFileText} className="h-4 w-4" />
                    <span>Text</span>
                  </button>
                  <button
                    onClick={() => setSelectedLesson(null)}
                    className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
            <div className="p-6">
              <div className="prose max-w-none">
                <div
                  className="whitespace-pre-wrap text-gray-700 leading-relaxed"
                  dangerouslySetInnerHTML={{
                    __html: selectedLesson.content.replace(/\n/g, '<br />')
                  }}
                />
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default LessonHistory