from flask import Flask, request, send_file, jsonify
from fpdf import FPDF
import os
import tempfile
from datetime import datetime
import textwrap

app = Flask(__name__)

class LessonPDF(FPDF):
    def __init__(self, title="", student_name="", age_group="", topic="", bible_passage="", theme=""):
        super().__init__()
        self.title_text = title
        self.student_name = student_name
        self.age_group = age_group
        self.topic = topic
        self.bible_passage = bible_passage
        self.theme = theme
        self.set_auto_page_break(auto=True, margin=15)
        
    def header(self):
        # Logo/Title
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, 'Sunday School Lesson', 0, 1, 'C')
        self.ln(5)
        
        # Lesson title
        if self.title_text:
            self.set_font('Arial', 'B', 14)
            self.cell(0, 10, self.title_text, 0, 1, 'C')
            self.ln(5)
        
        # Student info and date
        self.set_font('Arial', '', 10)
        if self.student_name:
            self.cell(0, 8, f'Student: {self.student_name}', 0, 0, 'L')
        self.cell(0, 8, f'Date: {datetime.now().strftime("%B %d, %Y")}', 0, 1, 'R')
        
        # Lesson details
        if self.age_group:
            self.cell(0, 8, f'Age Group: {self.age_group}', 0, 1, 'L')
        if self.topic:
            self.cell(0, 8, f'Topic: {self.topic}', 0, 1, 'L')
        if self.bible_passage:
            self.cell(0, 8, f'Bible Passage: {self.bible_passage}', 0, 1, 'L')
        if self.theme:
            self.cell(0, 8, f'Theme: {self.theme}', 0, 1, 'L')
        
        self.ln(5)
        # Line separator
        self.line(10, self.get_y(), 200, self.get_y())
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Generated by AI Lesson Bot - Page {self.page_no()}', 0, 0, 'C')

    def add_lesson_content(self, content):
        self.set_font('Arial', '', 11)
        
        # Split content into paragraphs
        paragraphs = content.split('\n\n')
        
        for paragraph in paragraphs:
            if paragraph.strip():
                # Handle headers (lines that are all caps or start with specific patterns)
                if (paragraph.isupper() and len(paragraph) < 100) or \
                   any(paragraph.startswith(prefix) for prefix in ['LESSON:', 'ACTIVITY:', 'DISCUSSION:', 'MATERIALS:', 'OPENING:', 'CLOSING:']):
                    self.ln(5)
                    self.set_font('Arial', 'B', 12)
                    self.cell(0, 8, paragraph.strip(), 0, 1, 'L')
                    self.set_font('Arial', '', 11)
                    self.ln(3)
                else:
                    # Regular paragraph
                    wrapped_lines = textwrap.wrap(paragraph.strip(), width=80)
                    for line in wrapped_lines:
                        self.cell(0, 6, line, 0, 1, 'L')
                    self.ln(3)

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "healthy", "service": "PDF Generator"})

@app.route('/generate-lesson-pdf', methods=['POST'])
def generate_lesson_pdf():
    try:
        data = request.json
        
        # Extract lesson data
        title = data.get('title', 'Sunday School Lesson')
        content = data.get('content', '')
        student_name = data.get('studentName', '')
        age_group = data.get('ageGroup', '')
        topic = data.get('topic', '')
        bible_passage = data.get('biblePassage', '')
        theme = data.get('theme', '')
        filename = data.get('filename', 'lesson.pdf')
        
        if not content:
            return jsonify({"error": "Content is required"}), 400
        
        # Create PDF
        pdf = LessonPDF(
            title=title,
            student_name=student_name,
            age_group=age_group,
            topic=topic,
            bible_passage=bible_passage,
            theme=theme
        )
        
        pdf.add_lesson_content(content)
        
        # Create temporary file
        temp_dir = tempfile.gettempdir()
        pdf_path = os.path.join(temp_dir, filename)
        pdf.output(pdf_path)
        
        return send_file(
            pdf_path,
            as_attachment=True,
            download_name=filename,
            mimetype='application/pdf'
        )
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/generate-batch-pdf', methods=['POST'])
def generate_batch_pdf():
    try:
        data = request.json
        lessons = data.get('lessons', [])
        
        if not lessons:
            return jsonify({"error": "Lessons array is required"}), 400
        
        # Create a combined PDF for all lessons
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        
        for i, lesson in enumerate(lessons):
            if i > 0:
                pdf.add_page()  # New page for each lesson except the first
            
            # Create individual lesson PDF content
            lesson_pdf = LessonPDF(
                title=lesson.get('title', 'Sunday School Lesson'),
                student_name=lesson.get('studentName', ''),
                age_group=lesson.get('ageGroup', ''),
                topic=lesson.get('topic', ''),
                bible_passage=lesson.get('biblePassage', ''),
                theme=lesson.get('theme', '')
            )
            
            lesson_pdf.add_lesson_content(lesson.get('content', ''))
            
            # Get the PDF content and add it to the main PDF
            temp_path = os.path.join(tempfile.gettempdir(), f'temp_lesson_{i}.pdf')
            lesson_pdf.output(temp_path)
            
            # Read and merge (simplified approach - in production, use PyPDF2 for better merging)
            with open(temp_path, 'rb') as f:
                if i == 0:
                    # First lesson becomes the base
                    main_pdf_path = os.path.join(tempfile.gettempdir(), 'batch_lessons.pdf')
                    lesson_pdf.output(main_pdf_path)
                # For subsequent lessons, we'd need PyPDF2 for proper merging
            
            # Clean up temp file
            os.remove(temp_path)
        
        filename = data.get('filename', 'batch_lessons.pdf')
        
        return send_file(
            main_pdf_path,
            as_attachment=True,
            download_name=filename,
            mimetype='application/pdf'
        )
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)